# Azure DevOps
# CI pipeline for PSRule-pipelines

variables:
  version: '2.7'
  buildConfiguration: 'Release'
  publish: 'true'
  imageName: 'ubuntu-22.04'

# Use build number format, i.e. 2.7.0-B2106001
name: $(version).$(date:yyMM)$(rev:rrr)

trigger:
  branches:
    include:
    - 'main'
  tags:
    include:
    - 'v2.*'

pr:
  branches:
    include:
    - 'main'

stages:

# Build pipeline
- stage: Build
  displayName: Build
  jobs:
  - job:
    pool:
      vmImage: $(imageName)
    displayName: 'Extension'
    variables:
      BUILD_TAG: '-canary'
    steps:

    # Install pipeline dependencies
    - powershell: ./scripts/pipeline-deps.ps1
      displayName: 'Install dependencies'

    # # Install TFS CLI
    # - task: TfxInstaller@3
    #   displayName: 'Install tfx-cli'
    #   inputs:
    #     version: 'v0.14.x'

    # Install GitVersion
    - pwsh: dotnet tool install --global GitVersion.Tool
      displayName: 'Install GitVersion'

    # Build extension
    - powershell: Invoke-Build -Configuration $(buildConfiguration) -Build $(Build.BuildNumber)
      displayName: 'Build extension'

    # PSRule results
    - task: PublishTestResults@2
      displayName: 'Publish PSRule results'
      inputs:
        testRunTitle: 'PSRule on $(imageName)'
        testRunner: NUnit
        testResultsFiles: 'reports/ps-rule*.xml'
        mergeTestResults: true
        platform: $(imageName)
        configuration: $(buildConfiguration)
        publishRunAttachments: true
      condition: succeededOrFailed()

    # Upload official extension
    - publish: out/extension
      displayName: Upload extension
      artifact: Extension
      condition: and(succeeded(), eq(variables['publish'], 'true'))

# Analysis pipeline
- stage: Analysis
  displayName: Analysis
  dependsOn: []
  jobs:
  - job: Secret_Scan
    pool:
      vmImage: 'windows-2022'
    displayName: Secret scan

    steps:
    - task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@3
      displayName: 'Scan for secrets'
      inputs:
        debugMode: false

    - task: securedevelopmentteam.vss-secure-development-tools.build-task-publishsecurityanalysislogs.PublishSecurityAnalysisLogs@3
      displayName: 'Publish scan logs'
      continueOnError: true

    - task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@2
      displayName: 'Check for failures'

# Release pipeline
- stage: Canary
  displayName: Canary
  dependsOn: [ 'Build', 'Analysis' ]
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  variables:
    isRelease: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v2.'))
  jobs:
  - template: jobs/release.yaml
    parameters:
      name: unoffical_canary_release
      displayName: 'Unoffical'
      extensionId: ps-rule
      extensionTag: -canary
      extensionName: PSRule (Canary)
      publisherId: bewhite

  - template: jobs/release.yaml
    parameters:
      name: offical_canary_release
      displayName: 'Offical'
      extensionId: pipelines
      extensionTag: -canary
      extensionName: PSRule (Canary)
      publisherId: ps-rule

# Release pipeline
- stage: Stable
  displayName: Stable
  dependsOn: Canary
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v2.'))
  jobs:
  - template: jobs/release.yaml
    parameters:
      name: unoffical_stable_release
      displayName: 'Unoffical'
      extensionId: ps-rule
      extensionTag: ''
      extensionName: PSRule
      extensionVisibility: public
      publisherId: bewhite

  - template: jobs/release.yaml
    parameters:
      name: offical_stable_release
      displayName: 'Offical'
      extensionId: pipelines
      extensionTag: ''
      extensionName: PSRule
      extensionVisibility: public
      publisherId: ps-rule
